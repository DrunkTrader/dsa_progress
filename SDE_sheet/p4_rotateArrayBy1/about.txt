##  LEFT ROTATE THE ARRAY BY 1  

    Problem Statement

        Given an array of N integers, left rotate the array by one place.

    Examples

        Input: N = 5, array[] = {1, 2, 3, 4, 5}
        Output: 2 3 4 5 1

        Input: N = 1, array[] = {3}
        Output: 3

# Brute Force Approach

    Intuition:

        The rotated array's first element moves to the last position.
        Store the first element in a temporary variable, shift the rest of the elements one position to the left, and then place the stored element at the end.

    Algorithm

        1. Create a temporary array of the same size as the given array.
        2. Iterate from index 1 to N-1 and assign temp[i-1] = arr[i].
        3. Assign the first element of the original array to the last position of the temporary array: temp[n-1] = arr[0].
        4. Print the elements of the temporary array.

    Complexity Analysis

        Time Complexity: O(n) — Single iteration through the array.
        Space Complexity: O(n) — Uses an additional array of size n.

# OPTIMAL APPROACH

        1. Store the First Element:
            - Assign the first element of the array to a variable: temp = arr[0].

        2. Shift Elements to the Left:
            - Iterate from index 0 to n-2.
            - For each index i, assign arr[i] = arr[i + 1].
            - This effectively shifts all elements one position to the left.

        3. Place the Stored Element at the End:
            - Assign temp to the last index of the array: arr[n - 1] = temp.

        4. Print the Array:
            - Iterate the array and print each element.

    Complexity Analysis

        Time Complexity: O(n) — Single pass through the array.
        Space Complexity: O(1) — No extra space used; in-place rotation.