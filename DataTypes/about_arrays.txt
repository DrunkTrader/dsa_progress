1. Array Basics

    Definition: A collection of elements of the same data type stored in contiguous memory.

    Declaration:
    cpp
    Copy

    int arr[5]; // Static array of size 5
    vector<int> arr; // Dynamic array (vector)

    Initialization:
    cpp
    Copy

    int arr[5] = {1, 2, 3, 4, 5}; // Static array
    vector<int> arr = {10, 20, 30}; // Dynamic array

2. Essential Operations
a) Accessing Elements

    Use [] or .at():
    cpp
    Copy

    int x = arr[0]; // First element
    int y = arr.at(1); // Second element

b) Modifying Elements

    Assign new values:
    cpp
    Copy

    arr[2] = 100; // Modify third element

c) Array Size

    Static array:
    cpp
    Copy

    int size = sizeof(arr) / sizeof(arr[0]); // Size of static array

    Dynamic array (vector):
    cpp
    Copy

    int size = arr.size(); // Size of dynamic array

d) Sorting

    Use sort():
    cpp
    Copy

    sort(arr, arr + 5); // Sort static array
    sort(arr.begin(), arr.end()); // Sort dynamic array

e) Reversing

    Use reverse():
    cpp
    Copy

    reverse(arr, arr + 5); // Reverse static array
    reverse(arr.begin(), arr.end()); // Reverse dynamic array

f) Searching

    Use binary_search() (for sorted arrays):
    cpp
    Copy

    bool found = binary_search(arr, arr + 5, key); // Static array
    bool found = binary_search(arr.begin(), arr.end(), key); // Dynamic array

g) Finding Min/Max

    Use min_element() and max_element():
    cpp
    Copy

    int min = *min_element(arr, arr + 5); // Static array
    int max = *max_element(arr.begin(), arr.end()); // Dynamic array

h) Sum of Elements

    Use a loop:
    cpp
    Copy

    int sum = 0;
    for (int x : arr) sum += x;

i) Dynamic Array Operations (Vector)

    Add/Remove elements:
    cpp
    Copy

    arr.push_back(100); // Add to end
    arr.pop_back(); // Remove from end

    Insert/Erase elements:
    cpp
    Copy

    arr.insert(arr.begin() + 2, 50); // Insert at index 2
    arr.erase(arr.begin() + 3); // Remove element at index 3

j) 2D Arrays

    Static 2D array:
    cpp
    Copy

    int arr[2][3] = {{1, 2, 3}, {4, 5, 6}};

    Dynamic 2D array (vector of vectors):
    cpp
    Copy

    vector<vector<int>> arr = {{10, 20}, {30, 40}};

3. Useful Methods for Competitive Programming
a) Sorting with Custom Comparator

    Sort in descending order:
    cpp
    Copy

    sort(arr, arr + 5, greater<int>()); // Static array
    sort(arr.begin(), arr.end(), greater<int>()); // Dynamic array

b) Unique Elements

    Remove duplicates (requires sorted array):
    cpp
    Copy

    auto last = unique(arr, arr + 5); // Static array
    arr.erase(unique(arr.begin(), arr.end()), arr.end()); // Dynamic array

c) Prefix Sum

    Calculate prefix sum:
    cpp
    Copy

    for (int i = 1; i < 5; i++) arr[i] += arr[i - 1];

d) Frequency Count

    Use a map or array:
    cpp
    Copy

    map<int, int> freq;
    for (int x : arr) freq[x]++;

e) Sliding Window

    Fixed-size window:
    cpp
    Copy

    int windowSum = 0;
    for (int i = 0; i < k; i++) windowSum += arr[i];
    for (int i = k; i < n; i++) {
        windowSum += arr[i] - arr[i - k];
    }

f) Binary Search on Answer

    For problems like "find the minimum/maximum value satisfying a condition":
    cpp
    Copy

    int low = 0, high = 1e9, ans = -1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (isValid(mid)) {
            ans = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }

4. Example Code
cpp
Copy

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

int main() {
    // Static array
    int arr[5] = {5, 3, 1, 4, 2};
    sort(arr, arr + 5);
    cout << "Sorted Static Array: ";
    for (int x : arr) cout << x << " "; // Output: 1 2 3 4 5
    cout << endl;

    // Dynamic array (vector)
    vector<int> vec = {10, 20, 30};
    vec.push_back(40);
    cout << "Dynamic Array: ";
    for (int x : vec) cout << x << " "; // Output: 10 20 30 40
    cout << endl;

    // 2D array
    vector<vector<int>> arr2D = {{1, 2}, {3, 4}};
    cout << "2D Array: " << endl;
    for (auto row : arr2D) {
        for (int x : row) cout << x << " "; // Output: 1 2 3 4
        cout << endl;
    }

    return 0;
}

Output
Copy

Sorted Static Array: 1 2 3 4 5 
Dynamic Array: 10 20 30 40 
2D Array: 
1 2 
3 4 